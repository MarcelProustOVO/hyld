// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SocketProto.proto

#include "SocketProto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_SocketProto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChatPack_SocketProto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SocketProto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FriendRoomPack_SocketProto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SocketProto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginPack_SocketProto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SocketProto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerPack_SocketProto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SocketProto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomPack_SocketProto_2eproto;
namespace SocketProto {
class MainPackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MainPack> _instance;
} _MainPack_default_instance_;
class ChatPackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatPack> _instance;
} _ChatPack_default_instance_;
class LoginPackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginPack> _instance;
} _LoginPack_default_instance_;
class RoomPackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomPack> _instance;
} _RoomPack_default_instance_;
class FriendRoomPackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FriendRoomPack> _instance;
} _FriendRoomPack_default_instance_;
class PlayerPackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerPack> _instance;
} _PlayerPack_default_instance_;
}  // namespace SocketProto
static void InitDefaultsscc_info_ChatPack_SocketProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SocketProto::_ChatPack_default_instance_;
    new (ptr) ::SocketProto::ChatPack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SocketProto::ChatPack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChatPack_SocketProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChatPack_SocketProto_2eproto}, {}};

static void InitDefaultsscc_info_FriendRoomPack_SocketProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SocketProto::_FriendRoomPack_default_instance_;
    new (ptr) ::SocketProto::FriendRoomPack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SocketProto::FriendRoomPack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FriendRoomPack_SocketProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FriendRoomPack_SocketProto_2eproto}, {}};

static void InitDefaultsscc_info_LoginPack_SocketProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SocketProto::_LoginPack_default_instance_;
    new (ptr) ::SocketProto::LoginPack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SocketProto::LoginPack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginPack_SocketProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginPack_SocketProto_2eproto}, {}};

static void InitDefaultsscc_info_MainPack_SocketProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SocketProto::_MainPack_default_instance_;
    new (ptr) ::SocketProto::MainPack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SocketProto::MainPack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_MainPack_SocketProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_MainPack_SocketProto_2eproto}, {
      &scc_info_LoginPack_SocketProto_2eproto.base,
      &scc_info_RoomPack_SocketProto_2eproto.base,
      &scc_info_PlayerPack_SocketProto_2eproto.base,
      &scc_info_FriendRoomPack_SocketProto_2eproto.base,
      &scc_info_ChatPack_SocketProto_2eproto.base,}};

static void InitDefaultsscc_info_PlayerPack_SocketProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SocketProto::_PlayerPack_default_instance_;
    new (ptr) ::SocketProto::PlayerPack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SocketProto::PlayerPack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerPack_SocketProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerPack_SocketProto_2eproto}, {}};

static void InitDefaultsscc_info_RoomPack_SocketProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SocketProto::_RoomPack_default_instance_;
    new (ptr) ::SocketProto::RoomPack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SocketProto::RoomPack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomPack_SocketProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoomPack_SocketProto_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SocketProto_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_SocketProto_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SocketProto_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SocketProto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SocketProto::MainPack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SocketProto::MainPack, requestcode_),
  PROTOBUF_FIELD_OFFSET(::SocketProto::MainPack, actioncode_),
  PROTOBUF_FIELD_OFFSET(::SocketProto::MainPack, returncode_),
  PROTOBUF_FIELD_OFFSET(::SocketProto::MainPack, loginpack_),
  PROTOBUF_FIELD_OFFSET(::SocketProto::MainPack, str_),
  PROTOBUF_FIELD_OFFSET(::SocketProto::MainPack, roompack_),
  PROTOBUF_FIELD_OFFSET(::SocketProto::MainPack, friendspack_),
  PROTOBUF_FIELD_OFFSET(::SocketProto::MainPack, userinfopack_),
  PROTOBUF_FIELD_OFFSET(::SocketProto::MainPack, friendroompack_),
  PROTOBUF_FIELD_OFFSET(::SocketProto::MainPack, playerspack_),
  PROTOBUF_FIELD_OFFSET(::SocketProto::MainPack, chatpack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SocketProto::ChatPack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SocketProto::ChatPack, playername_),
  PROTOBUF_FIELD_OFFSET(::SocketProto::ChatPack, message_),
  PROTOBUF_FIELD_OFFSET(::SocketProto::ChatPack, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SocketProto::LoginPack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SocketProto::LoginPack, username_),
  PROTOBUF_FIELD_OFFSET(::SocketProto::LoginPack, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SocketProto::RoomPack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SocketProto::RoomPack, roomid_),
  PROTOBUF_FIELD_OFFSET(::SocketProto::RoomPack, maxnum_),
  PROTOBUF_FIELD_OFFSET(::SocketProto::RoomPack, curnum_),
  PROTOBUF_FIELD_OFFSET(::SocketProto::RoomPack, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SocketProto::FriendRoomPack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SocketProto::FriendRoomPack, roomid_),
  PROTOBUF_FIELD_OFFSET(::SocketProto::FriendRoomPack, maxnum_),
  PROTOBUF_FIELD_OFFSET(::SocketProto::FriendRoomPack, curnum_),
  PROTOBUF_FIELD_OFFSET(::SocketProto::FriendRoomPack, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SocketProto::PlayerPack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SocketProto::PlayerPack, username_),
  PROTOBUF_FIELD_OFFSET(::SocketProto::PlayerPack, playername_),
  PROTOBUF_FIELD_OFFSET(::SocketProto::PlayerPack, id_),
  PROTOBUF_FIELD_OFFSET(::SocketProto::PlayerPack, state_),
  PROTOBUF_FIELD_OFFSET(::SocketProto::PlayerPack, hero_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SocketProto::MainPack)},
  { 16, -1, sizeof(::SocketProto::ChatPack)},
  { 24, -1, sizeof(::SocketProto::LoginPack)},
  { 31, -1, sizeof(::SocketProto::RoomPack)},
  { 40, -1, sizeof(::SocketProto::FriendRoomPack)},
  { 49, -1, sizeof(::SocketProto::PlayerPack)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SocketProto::_MainPack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SocketProto::_ChatPack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SocketProto::_LoginPack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SocketProto::_RoomPack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SocketProto::_FriendRoomPack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SocketProto::_PlayerPack_default_instance_),
};

const char descriptor_table_protodef_SocketProto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021SocketProto.proto\022\013SocketProto\"\335\003\n\010Mai"
  "nPack\022-\n\013requestcode\030\001 \001(\0162\030.SocketProto"
  ".RequestCode\022+\n\nactioncode\030\002 \001(\0162\027.Socke"
  "tProto.ActionCode\022+\n\nreturncode\030\003 \001(\0162\027."
  "SocketProto.ReturnCode\022)\n\tloginpack\030\004 \001("
  "\0132\026.SocketProto.LoginPack\022\013\n\003str\030\005 \001(\t\022\'"
  "\n\010roompack\030\006 \003(\0132\025.SocketProto.RoomPack\022"
  ",\n\013friendspack\030\007 \003(\0132\027.SocketProto.Playe"
  "rPack\022-\n\014userInfopack\030\010 \001(\0132\027.SocketProt"
  "o.PlayerPack\0223\n\016friendroompack\030\t \003(\0132\033.S"
  "ocketProto.FriendRoomPack\022,\n\013playerspack"
  "\030\n \003(\0132\027.SocketProto.PlayerPack\022\'\n\010chatp"
  "ack\030\013 \001(\0132\025.SocketProto.ChatPack\">\n\010Chat"
  "Pack\022\022\n\nplayername\030\001 \001(\t\022\017\n\007message\030\002 \001("
  "\t\022\r\n\005state\030\003 \001(\005\"/\n\tLoginPack\022\020\n\010usernam"
  "e\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"a\n\010RoomPack\022\016\n"
  "\006roomid\030\001 \001(\t\022\016\n\006maxnum\030\002 \001(\005\022\016\n\006curnum\030"
  "\003 \001(\005\022%\n\005state\030\004 \001(\0162\026.SocketProto.RoomS"
  "tate\"g\n\016FriendRoomPack\022\016\n\006roomid\030\001 \001(\t\022\016"
  "\n\006maxnum\030\002 \001(\005\022\016\n\006curnum\030\003 \001(\005\022%\n\005state\030"
  "\004 \001(\0162\026.SocketProto.RoomState\"\210\001\n\nPlayer"
  "Pack\022\020\n\010username\030\001 \001(\t\022\022\n\nplayername\030\002 \001"
  "(\t\022\n\n\002id\030\003 \001(\005\022\'\n\005state\030\004 \001(\0162\030.SocketPr"
  "oto.PlayerState\022\037\n\004hero\030\005 \001(\0162\021.SocketPr"
  "oto.Hero*\\\n\013RequestCode\022\017\n\013RequestNone\020\000"
  "\022\010\n\004User\020\001\022\010\n\004Room\020\002\022\n\n\006Friend\020\003\022\016\n\nFrie"
  "ndRoom\020\004\022\014\n\010PingPong\020\005*\350\003\n\nActionCode\022\016\n"
  "\nActionNone\020\000\022\t\n\005Logon\020\001\022\t\n\005Login\020\002\022\016\n\nC"
  "reateRoom\020\003\022\014\n\010FindRoom\020\004\022\016\n\nPlayerList\020"
  "\005\022\014\n\010JoinRoom\020\006\022\010\n\004Exit\020\007\022\010\n\004Chat\020\010\022\021\n\rA"
  "plyAddFriend\020\t\022\020\n\014InviteFriend\020\n\022\014\n\010Find"
  "Name\020\013\022\016\n\nUpdateName\020\014\022\023\n\017AcceptAddFrien"
  "d\020\r\022\023\n\017RejectAddFriend\020\016\022\022\n\016FindPlayerIn"
  "fo\020\017\022\023\n\017FindFriendsInfo\020\020\022\017\n\013FriendLogin"
  "\020\021\022\020\n\014FriendLogout\020\022\022\026\n\022AcceptInvateFrie"
  "nd\020\023\022\026\n\022RejectInvateFriend\020\024\022\026\n\022CancalIn"
  "vateFriend\020\025\022\014\n\010ExitRoom\020\026\022\025\n\021GetFriendR"
  "oomInfo\020\027\022\010\n\004Ping\020\030\022\010\n\004Pong\020\031\022\016\n\nChangeH"
  "ero\020\032\022\032\n\026UpDateActiveFriendInfo\020\033*O\n\nRet"
  "urnCode\022\016\n\nReturnNone\020\000\022\013\n\007Succeed\020\001\022\010\n\004"
  "Fail\020\002\022\013\n\007NotRoom\020\003\022\r\n\tAddFriend\020\004*7\n\tRo"
  "omState\022\016\n\nRoomNormal\020\000\022\014\n\010RoomFull\020\001\022\014\n"
  "\010RoomGame\020\002*i\n\013PlayerState\022\020\n\014PlayerOnli"
  "ne\020\000\022\021\n\rPlayerOutline\020\001\022\016\n\nPlayerGame\020\002\022"
  "\020\n\014PlayerOnRoom\020\003\022\023\n\017PlayerOnInvated\020\004*\353"
  "\001\n\004Hero\022\t\n\005XueLi\020\000\022\n\n\006KeErTe\020\001\022\n\n\006PeiPei"
  "\020\002\022\t\n\005PanNi\020\003\022\010\n\004BaLi\020\004\022\013\n\007GongNiu\020\005\022\n\n\006"
  "DaLiEr\020\006\022\010\n\004GeEr\020\007\022\013\n\007BuLuoKe\020\010\022\016\n\nBaoPo"
  "MaiKe\020\t\022\007\n\003ABo\020\n\022\010\n\004DiKe\020\013\022\t\n\005BeiYa\020\014\022\010\n"
  "\004TaLa\020\r\022\013\n\007MaiKeSi\020\016\022\013\n\007SiPaiKe\020\017\022\t\n\005Hei"
  "Ya\020\020\022\t\n\005LiAng\020\021\022\010\n\004PaMu\020\022\022\t\n\005RuiKe\020\023b\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_SocketProto_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_SocketProto_2eproto_sccs[6] = {
  &scc_info_ChatPack_SocketProto_2eproto.base,
  &scc_info_FriendRoomPack_SocketProto_2eproto.base,
  &scc_info_LoginPack_SocketProto_2eproto.base,
  &scc_info_MainPack_SocketProto_2eproto.base,
  &scc_info_PlayerPack_SocketProto_2eproto.base,
  &scc_info_RoomPack_SocketProto_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SocketProto_2eproto_once;
static bool descriptor_table_SocketProto_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SocketProto_2eproto = {
  &descriptor_table_SocketProto_2eproto_initialized, descriptor_table_protodef_SocketProto_2eproto, "SocketProto.proto", 2044,
  &descriptor_table_SocketProto_2eproto_once, descriptor_table_SocketProto_2eproto_sccs, descriptor_table_SocketProto_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_SocketProto_2eproto::offsets,
  file_level_metadata_SocketProto_2eproto, 6, file_level_enum_descriptors_SocketProto_2eproto, file_level_service_descriptors_SocketProto_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SocketProto_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_SocketProto_2eproto), true);
namespace SocketProto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SocketProto_2eproto);
  return file_level_enum_descriptors_SocketProto_2eproto[0];
}
bool RequestCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SocketProto_2eproto);
  return file_level_enum_descriptors_SocketProto_2eproto[1];
}
bool ActionCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReturnCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SocketProto_2eproto);
  return file_level_enum_descriptors_SocketProto_2eproto[2];
}
bool ReturnCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoomState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SocketProto_2eproto);
  return file_level_enum_descriptors_SocketProto_2eproto[3];
}
bool RoomState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SocketProto_2eproto);
  return file_level_enum_descriptors_SocketProto_2eproto[4];
}
bool PlayerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Hero_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SocketProto_2eproto);
  return file_level_enum_descriptors_SocketProto_2eproto[5];
}
bool Hero_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MainPack::InitAsDefaultInstance() {
  ::SocketProto::_MainPack_default_instance_._instance.get_mutable()->loginpack_ = const_cast< ::SocketProto::LoginPack*>(
      ::SocketProto::LoginPack::internal_default_instance());
  ::SocketProto::_MainPack_default_instance_._instance.get_mutable()->userinfopack_ = const_cast< ::SocketProto::PlayerPack*>(
      ::SocketProto::PlayerPack::internal_default_instance());
  ::SocketProto::_MainPack_default_instance_._instance.get_mutable()->chatpack_ = const_cast< ::SocketProto::ChatPack*>(
      ::SocketProto::ChatPack::internal_default_instance());
}
class MainPack::_Internal {
 public:
  static const ::SocketProto::LoginPack& loginpack(const MainPack* msg);
  static const ::SocketProto::PlayerPack& userinfopack(const MainPack* msg);
  static const ::SocketProto::ChatPack& chatpack(const MainPack* msg);
};

const ::SocketProto::LoginPack&
MainPack::_Internal::loginpack(const MainPack* msg) {
  return *msg->loginpack_;
}
const ::SocketProto::PlayerPack&
MainPack::_Internal::userinfopack(const MainPack* msg) {
  return *msg->userinfopack_;
}
const ::SocketProto::ChatPack&
MainPack::_Internal::chatpack(const MainPack* msg) {
  return *msg->chatpack_;
}
MainPack::MainPack()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SocketProto.MainPack)
}
MainPack::MainPack(const MainPack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      roompack_(from.roompack_),
      friendspack_(from.friendspack_),
      friendroompack_(from.friendroompack_),
      playerspack_(from.playerspack_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_str().empty()) {
    str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  if (from._internal_has_loginpack()) {
    loginpack_ = new ::SocketProto::LoginPack(*from.loginpack_);
  } else {
    loginpack_ = nullptr;
  }
  if (from._internal_has_userinfopack()) {
    userinfopack_ = new ::SocketProto::PlayerPack(*from.userinfopack_);
  } else {
    userinfopack_ = nullptr;
  }
  if (from._internal_has_chatpack()) {
    chatpack_ = new ::SocketProto::ChatPack(*from.chatpack_);
  } else {
    chatpack_ = nullptr;
  }
  ::memcpy(&requestcode_, &from.requestcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&returncode_) -
    reinterpret_cast<char*>(&requestcode_)) + sizeof(returncode_));
  // @@protoc_insertion_point(copy_constructor:SocketProto.MainPack)
}

void MainPack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MainPack_SocketProto_2eproto.base);
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&loginpack_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&returncode_) -
      reinterpret_cast<char*>(&loginpack_)) + sizeof(returncode_));
}

MainPack::~MainPack() {
  // @@protoc_insertion_point(destructor:SocketProto.MainPack)
  SharedDtor();
}

void MainPack::SharedDtor() {
  str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete loginpack_;
  if (this != internal_default_instance()) delete userinfopack_;
  if (this != internal_default_instance()) delete chatpack_;
}

void MainPack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MainPack& MainPack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MainPack_SocketProto_2eproto.base);
  return *internal_default_instance();
}


void MainPack::Clear() {
// @@protoc_insertion_point(message_clear_start:SocketProto.MainPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roompack_.Clear();
  friendspack_.Clear();
  friendroompack_.Clear();
  playerspack_.Clear();
  str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && loginpack_ != nullptr) {
    delete loginpack_;
  }
  loginpack_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && userinfopack_ != nullptr) {
    delete userinfopack_;
  }
  userinfopack_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && chatpack_ != nullptr) {
    delete chatpack_;
  }
  chatpack_ = nullptr;
  ::memset(&requestcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&returncode_) -
      reinterpret_cast<char*>(&requestcode_)) + sizeof(returncode_));
  _internal_metadata_.Clear();
}

const char* MainPack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SocketProto.RequestCode requestcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_requestcode(static_cast<::SocketProto::RequestCode>(val));
        } else goto handle_unusual;
        continue;
      // .SocketProto.ActionCode actioncode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_actioncode(static_cast<::SocketProto::ActionCode>(val));
        } else goto handle_unusual;
        continue;
      // .SocketProto.ReturnCode returncode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_returncode(static_cast<::SocketProto::ReturnCode>(val));
        } else goto handle_unusual;
        continue;
      // .SocketProto.LoginPack loginpack = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_loginpack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string str = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SocketProto.MainPack.str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SocketProto.RoomPack roompack = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roompack(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SocketProto.PlayerPack friendspack = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friendspack(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .SocketProto.PlayerPack userInfopack = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_userinfopack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SocketProto.FriendRoomPack friendroompack = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friendroompack(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SocketProto.PlayerPack playerspack = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playerspack(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // .SocketProto.ChatPack chatpack = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_chatpack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MainPack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SocketProto.MainPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SocketProto.RequestCode requestcode = 1;
  if (this->requestcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_requestcode(), target);
  }

  // .SocketProto.ActionCode actioncode = 2;
  if (this->actioncode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_actioncode(), target);
  }

  // .SocketProto.ReturnCode returncode = 3;
  if (this->returncode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_returncode(), target);
  }

  // .SocketProto.LoginPack loginpack = 4;
  if (this->has_loginpack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::loginpack(this), target, stream);
  }

  // string str = 5;
  if (this->str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SocketProto.MainPack.str");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_str(), target);
  }

  // repeated .SocketProto.RoomPack roompack = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roompack_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_roompack(i), target, stream);
  }

  // repeated .SocketProto.PlayerPack friendspack = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_friendspack_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_friendspack(i), target, stream);
  }

  // .SocketProto.PlayerPack userInfopack = 8;
  if (this->has_userinfopack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::userinfopack(this), target, stream);
  }

  // repeated .SocketProto.FriendRoomPack friendroompack = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_friendroompack_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_friendroompack(i), target, stream);
  }

  // repeated .SocketProto.PlayerPack playerspack = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_playerspack_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_playerspack(i), target, stream);
  }

  // .SocketProto.ChatPack chatpack = 11;
  if (this->has_chatpack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::chatpack(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SocketProto.MainPack)
  return target;
}

size_t MainPack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SocketProto.MainPack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SocketProto.RoomPack roompack = 6;
  total_size += 1UL * this->_internal_roompack_size();
  for (const auto& msg : this->roompack_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SocketProto.PlayerPack friendspack = 7;
  total_size += 1UL * this->_internal_friendspack_size();
  for (const auto& msg : this->friendspack_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SocketProto.FriendRoomPack friendroompack = 9;
  total_size += 1UL * this->_internal_friendroompack_size();
  for (const auto& msg : this->friendroompack_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SocketProto.PlayerPack playerspack = 10;
  total_size += 1UL * this->_internal_playerspack_size();
  for (const auto& msg : this->playerspack_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string str = 5;
  if (this->str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str());
  }

  // .SocketProto.LoginPack loginpack = 4;
  if (this->has_loginpack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *loginpack_);
  }

  // .SocketProto.PlayerPack userInfopack = 8;
  if (this->has_userinfopack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *userinfopack_);
  }

  // .SocketProto.ChatPack chatpack = 11;
  if (this->has_chatpack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chatpack_);
  }

  // .SocketProto.RequestCode requestcode = 1;
  if (this->requestcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_requestcode());
  }

  // .SocketProto.ActionCode actioncode = 2;
  if (this->actioncode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_actioncode());
  }

  // .SocketProto.ReturnCode returncode = 3;
  if (this->returncode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_returncode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MainPack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SocketProto.MainPack)
  GOOGLE_DCHECK_NE(&from, this);
  const MainPack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MainPack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SocketProto.MainPack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SocketProto.MainPack)
    MergeFrom(*source);
  }
}

void MainPack::MergeFrom(const MainPack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SocketProto.MainPack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roompack_.MergeFrom(from.roompack_);
  friendspack_.MergeFrom(from.friendspack_);
  friendroompack_.MergeFrom(from.friendroompack_);
  playerspack_.MergeFrom(from.playerspack_);
  if (from.str().size() > 0) {

    str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  if (from.has_loginpack()) {
    _internal_mutable_loginpack()->::SocketProto::LoginPack::MergeFrom(from._internal_loginpack());
  }
  if (from.has_userinfopack()) {
    _internal_mutable_userinfopack()->::SocketProto::PlayerPack::MergeFrom(from._internal_userinfopack());
  }
  if (from.has_chatpack()) {
    _internal_mutable_chatpack()->::SocketProto::ChatPack::MergeFrom(from._internal_chatpack());
  }
  if (from.requestcode() != 0) {
    _internal_set_requestcode(from._internal_requestcode());
  }
  if (from.actioncode() != 0) {
    _internal_set_actioncode(from._internal_actioncode());
  }
  if (from.returncode() != 0) {
    _internal_set_returncode(from._internal_returncode());
  }
}

void MainPack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SocketProto.MainPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainPack::CopyFrom(const MainPack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SocketProto.MainPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainPack::IsInitialized() const {
  return true;
}

void MainPack::InternalSwap(MainPack* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  roompack_.InternalSwap(&other->roompack_);
  friendspack_.InternalSwap(&other->friendspack_);
  friendroompack_.InternalSwap(&other->friendroompack_);
  playerspack_.InternalSwap(&other->playerspack_);
  str_.Swap(&other->str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(loginpack_, other->loginpack_);
  swap(userinfopack_, other->userinfopack_);
  swap(chatpack_, other->chatpack_);
  swap(requestcode_, other->requestcode_);
  swap(actioncode_, other->actioncode_);
  swap(returncode_, other->returncode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MainPack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChatPack::InitAsDefaultInstance() {
}
class ChatPack::_Internal {
 public:
};

ChatPack::ChatPack()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SocketProto.ChatPack)
}
ChatPack::ChatPack(const ChatPack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_playername().empty()) {
    playername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playername_);
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SocketProto.ChatPack)
}

void ChatPack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatPack_SocketProto_2eproto.base);
  playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

ChatPack::~ChatPack() {
  // @@protoc_insertion_point(destructor:SocketProto.ChatPack)
  SharedDtor();
}

void ChatPack::SharedDtor() {
  playername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatPack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatPack& ChatPack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatPack_SocketProto_2eproto.base);
  return *internal_default_instance();
}


void ChatPack::Clear() {
// @@protoc_insertion_point(message_clear_start:SocketProto.ChatPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  _internal_metadata_.Clear();
}

const char* ChatPack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string playername = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_playername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SocketProto.ChatPack.playername"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SocketProto.ChatPack.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatPack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SocketProto.ChatPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string playername = 1;
  if (this->playername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playername().data(), static_cast<int>(this->_internal_playername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SocketProto.ChatPack.playername");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playername(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SocketProto.ChatPack.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // int32 state = 3;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SocketProto.ChatPack)
  return target;
}

size_t ChatPack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SocketProto.ChatPack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string playername = 1;
  if (this->playername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playername());
  }

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatPack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SocketProto.ChatPack)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatPack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatPack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SocketProto.ChatPack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SocketProto.ChatPack)
    MergeFrom(*source);
  }
}

void ChatPack::MergeFrom(const ChatPack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SocketProto.ChatPack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playername().size() > 0) {

    playername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playername_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void ChatPack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SocketProto.ChatPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatPack::CopyFrom(const ChatPack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SocketProto.ChatPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatPack::IsInitialized() const {
  return true;
}

void ChatPack::InternalSwap(ChatPack* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  playername_.Swap(&other->playername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatPack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginPack::InitAsDefaultInstance() {
}
class LoginPack::_Internal {
 public:
};

LoginPack::LoginPack()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SocketProto.LoginPack)
}
LoginPack::LoginPack(const LoginPack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:SocketProto.LoginPack)
}

void LoginPack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginPack_SocketProto_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LoginPack::~LoginPack() {
  // @@protoc_insertion_point(destructor:SocketProto.LoginPack)
  SharedDtor();
}

void LoginPack::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginPack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginPack& LoginPack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginPack_SocketProto_2eproto.base);
  return *internal_default_instance();
}


void LoginPack::Clear() {
// @@protoc_insertion_point(message_clear_start:SocketProto.LoginPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* LoginPack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SocketProto.LoginPack.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SocketProto.LoginPack.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginPack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SocketProto.LoginPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SocketProto.LoginPack.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SocketProto.LoginPack.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SocketProto.LoginPack)
  return target;
}

size_t LoginPack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SocketProto.LoginPack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginPack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SocketProto.LoginPack)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginPack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginPack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SocketProto.LoginPack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SocketProto.LoginPack)
    MergeFrom(*source);
  }
}

void LoginPack::MergeFrom(const LoginPack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SocketProto.LoginPack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void LoginPack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SocketProto.LoginPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginPack::CopyFrom(const LoginPack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SocketProto.LoginPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginPack::IsInitialized() const {
  return true;
}

void LoginPack::InternalSwap(LoginPack* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginPack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomPack::InitAsDefaultInstance() {
}
class RoomPack::_Internal {
 public:
};

RoomPack::RoomPack()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SocketProto.RoomPack)
}
RoomPack::RoomPack(const RoomPack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_roomid().empty()) {
    roomid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  ::memcpy(&maxnum_, &from.maxnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&maxnum_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:SocketProto.RoomPack)
}

void RoomPack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomPack_SocketProto_2eproto.base);
  roomid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&maxnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&maxnum_)) + sizeof(state_));
}

RoomPack::~RoomPack() {
  // @@protoc_insertion_point(destructor:SocketProto.RoomPack)
  SharedDtor();
}

void RoomPack::SharedDtor() {
  roomid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoomPack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomPack& RoomPack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomPack_SocketProto_2eproto.base);
  return *internal_default_instance();
}


void RoomPack::Clear() {
// @@protoc_insertion_point(message_clear_start:SocketProto.RoomPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&maxnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&maxnum_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

const char* RoomPack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string roomid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_roomid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SocketProto.RoomPack.roomid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          curnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SocketProto.RoomState state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::SocketProto::RoomState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomPack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SocketProto.RoomPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string roomid = 1;
  if (this->roomid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomid().data(), static_cast<int>(this->_internal_roomid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SocketProto.RoomPack.roomid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roomid(), target);
  }

  // int32 maxnum = 2;
  if (this->maxnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_maxnum(), target);
  }

  // int32 curnum = 3;
  if (this->curnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_curnum(), target);
  }

  // .SocketProto.RoomState state = 4;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SocketProto.RoomPack)
  return target;
}

size_t RoomPack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SocketProto.RoomPack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomid = 1;
  if (this->roomid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomid());
  }

  // int32 maxnum = 2;
  if (this->maxnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxnum());
  }

  // int32 curnum = 3;
  if (this->curnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curnum());
  }

  // .SocketProto.RoomState state = 4;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomPack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SocketProto.RoomPack)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomPack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomPack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SocketProto.RoomPack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SocketProto.RoomPack)
    MergeFrom(*source);
  }
}

void RoomPack::MergeFrom(const RoomPack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SocketProto.RoomPack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid().size() > 0) {

    roomid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  if (from.maxnum() != 0) {
    _internal_set_maxnum(from._internal_maxnum());
  }
  if (from.curnum() != 0) {
    _internal_set_curnum(from._internal_curnum());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void RoomPack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SocketProto.RoomPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomPack::CopyFrom(const RoomPack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SocketProto.RoomPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomPack::IsInitialized() const {
  return true;
}

void RoomPack::InternalSwap(RoomPack* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  roomid_.Swap(&other->roomid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(maxnum_, other->maxnum_);
  swap(curnum_, other->curnum_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomPack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FriendRoomPack::InitAsDefaultInstance() {
}
class FriendRoomPack::_Internal {
 public:
};

FriendRoomPack::FriendRoomPack()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SocketProto.FriendRoomPack)
}
FriendRoomPack::FriendRoomPack(const FriendRoomPack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_roomid().empty()) {
    roomid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  ::memcpy(&maxnum_, &from.maxnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&maxnum_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:SocketProto.FriendRoomPack)
}

void FriendRoomPack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FriendRoomPack_SocketProto_2eproto.base);
  roomid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&maxnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&maxnum_)) + sizeof(state_));
}

FriendRoomPack::~FriendRoomPack() {
  // @@protoc_insertion_point(destructor:SocketProto.FriendRoomPack)
  SharedDtor();
}

void FriendRoomPack::SharedDtor() {
  roomid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FriendRoomPack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FriendRoomPack& FriendRoomPack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FriendRoomPack_SocketProto_2eproto.base);
  return *internal_default_instance();
}


void FriendRoomPack::Clear() {
// @@protoc_insertion_point(message_clear_start:SocketProto.FriendRoomPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&maxnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&maxnum_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

const char* FriendRoomPack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string roomid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_roomid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SocketProto.FriendRoomPack.roomid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          curnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SocketProto.RoomState state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::SocketProto::RoomState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FriendRoomPack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SocketProto.FriendRoomPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string roomid = 1;
  if (this->roomid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomid().data(), static_cast<int>(this->_internal_roomid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SocketProto.FriendRoomPack.roomid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roomid(), target);
  }

  // int32 maxnum = 2;
  if (this->maxnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_maxnum(), target);
  }

  // int32 curnum = 3;
  if (this->curnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_curnum(), target);
  }

  // .SocketProto.RoomState state = 4;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SocketProto.FriendRoomPack)
  return target;
}

size_t FriendRoomPack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SocketProto.FriendRoomPack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomid = 1;
  if (this->roomid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomid());
  }

  // int32 maxnum = 2;
  if (this->maxnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxnum());
  }

  // int32 curnum = 3;
  if (this->curnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curnum());
  }

  // .SocketProto.RoomState state = 4;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendRoomPack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SocketProto.FriendRoomPack)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRoomPack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FriendRoomPack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SocketProto.FriendRoomPack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SocketProto.FriendRoomPack)
    MergeFrom(*source);
  }
}

void FriendRoomPack::MergeFrom(const FriendRoomPack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SocketProto.FriendRoomPack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid().size() > 0) {

    roomid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  if (from.maxnum() != 0) {
    _internal_set_maxnum(from._internal_maxnum());
  }
  if (from.curnum() != 0) {
    _internal_set_curnum(from._internal_curnum());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void FriendRoomPack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SocketProto.FriendRoomPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRoomPack::CopyFrom(const FriendRoomPack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SocketProto.FriendRoomPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRoomPack::IsInitialized() const {
  return true;
}

void FriendRoomPack::InternalSwap(FriendRoomPack* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  roomid_.Swap(&other->roomid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(maxnum_, other->maxnum_);
  swap(curnum_, other->curnum_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendRoomPack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerPack::InitAsDefaultInstance() {
}
class PlayerPack::_Internal {
 public:
};

PlayerPack::PlayerPack()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SocketProto.PlayerPack)
}
PlayerPack::PlayerPack(const PlayerPack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_playername().empty()) {
    playername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playername_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_) -
    reinterpret_cast<char*>(&id_)) + sizeof(hero_));
  // @@protoc_insertion_point(copy_constructor:SocketProto.PlayerPack)
}

void PlayerPack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerPack_SocketProto_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hero_) -
      reinterpret_cast<char*>(&id_)) + sizeof(hero_));
}

PlayerPack::~PlayerPack() {
  // @@protoc_insertion_point(destructor:SocketProto.PlayerPack)
  SharedDtor();
}

void PlayerPack::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerPack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerPack& PlayerPack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerPack_SocketProto_2eproto.base);
  return *internal_default_instance();
}


void PlayerPack::Clear() {
// @@protoc_insertion_point(message_clear_start:SocketProto.PlayerPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hero_) -
      reinterpret_cast<char*>(&id_)) + sizeof(hero_));
  _internal_metadata_.Clear();
}

const char* PlayerPack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SocketProto.PlayerPack.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string playername = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_playername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SocketProto.PlayerPack.playername"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SocketProto.PlayerState state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::SocketProto::PlayerState>(val));
        } else goto handle_unusual;
        continue;
      // .SocketProto.Hero hero = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_hero(static_cast<::SocketProto::Hero>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerPack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SocketProto.PlayerPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SocketProto.PlayerPack.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string playername = 2;
  if (this->playername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playername().data(), static_cast<int>(this->_internal_playername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SocketProto.PlayerPack.playername");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_playername(), target);
  }

  // int32 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_id(), target);
  }

  // .SocketProto.PlayerState state = 4;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_state(), target);
  }

  // .SocketProto.Hero hero = 5;
  if (this->hero() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_hero(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SocketProto.PlayerPack)
  return target;
}

size_t PlayerPack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SocketProto.PlayerPack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string playername = 2;
  if (this->playername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playername());
  }

  // int32 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // .SocketProto.PlayerState state = 4;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // .SocketProto.Hero hero = 5;
  if (this->hero() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_hero());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerPack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SocketProto.PlayerPack)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerPack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerPack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SocketProto.PlayerPack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SocketProto.PlayerPack)
    MergeFrom(*source);
  }
}

void PlayerPack::MergeFrom(const PlayerPack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SocketProto.PlayerPack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.playername().size() > 0) {

    playername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playername_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.hero() != 0) {
    _internal_set_hero(from._internal_hero());
  }
}

void PlayerPack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SocketProto.PlayerPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPack::CopyFrom(const PlayerPack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SocketProto.PlayerPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPack::IsInitialized() const {
  return true;
}

void PlayerPack::InternalSwap(PlayerPack* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  playername_.Swap(&other->playername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(state_, other->state_);
  swap(hero_, other->hero_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerPack::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SocketProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SocketProto::MainPack* Arena::CreateMaybeMessage< ::SocketProto::MainPack >(Arena* arena) {
  return Arena::CreateInternal< ::SocketProto::MainPack >(arena);
}
template<> PROTOBUF_NOINLINE ::SocketProto::ChatPack* Arena::CreateMaybeMessage< ::SocketProto::ChatPack >(Arena* arena) {
  return Arena::CreateInternal< ::SocketProto::ChatPack >(arena);
}
template<> PROTOBUF_NOINLINE ::SocketProto::LoginPack* Arena::CreateMaybeMessage< ::SocketProto::LoginPack >(Arena* arena) {
  return Arena::CreateInternal< ::SocketProto::LoginPack >(arena);
}
template<> PROTOBUF_NOINLINE ::SocketProto::RoomPack* Arena::CreateMaybeMessage< ::SocketProto::RoomPack >(Arena* arena) {
  return Arena::CreateInternal< ::SocketProto::RoomPack >(arena);
}
template<> PROTOBUF_NOINLINE ::SocketProto::FriendRoomPack* Arena::CreateMaybeMessage< ::SocketProto::FriendRoomPack >(Arena* arena) {
  return Arena::CreateInternal< ::SocketProto::FriendRoomPack >(arena);
}
template<> PROTOBUF_NOINLINE ::SocketProto::PlayerPack* Arena::CreateMaybeMessage< ::SocketProto::PlayerPack >(Arena* arena) {
  return Arena::CreateInternal< ::SocketProto::PlayerPack >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
